Sub FormatCPKCTable_Basic_AlignedProperly()
    Dim ws As Worksheet
    Dim cell As Range, startCell As Range
    Dim col As Long, lastCol As Long
    Dim rowNum As Long, lastRow As Long
    Dim text As String
    Dim r As Long, c As Long
    Dim prevText As String, currText As String
    Dim prevState As String, currState As String
    Dim stateStart As Long
    Dim stateWordCount As Integer
    Dim charCount As Long, charsPerLine As Double, estLines As Long, maxLines As Long
    Dim totalWidth As Double
    Dim mc As Range
    Dim headerEndRow As Long
    Set ws = ActiveSheet
    For Each cell In ws.UsedRange
        If LCase(Left(Trim(cell.Value), 6)) = "action" Then
            Set startCell = cell
            Exit For
        End If
    Next cell
    If startCell Is Nothing Then
        MsgBox "No header starting with 'Action' found."
        Exit Sub
    End If
    rowNum = startCell.Row
    lastCol = ws.Cells(rowNum, ws.Columns.count).End(xlToLeft).Column
    For col = startCell.Column - 1 To lastCol
        Set cell = ws.Cells(rowNum, col)
        text = Trim(cell.Value)
        With cell
            .Font.Name = "Aptos Narrow"
            .Font.Size = 10
            .Font.Bold = True
            .Interior.Color = RGB(191, 191, 191)
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
        End With
        If text <> "" Then
            cell.Value = Application.WorksheetFunction.Proper(text)
        End If
    Next col
    Call CleanUpHeaderMergedRows(ws, startCell.Row)
    headerEndRow = startCell.MergeArea.Row + startCell.MergeArea.Rows.count - 1
    Call DeleteBottomRowsOfVerticalMerges(ws, headerEndRow + 1)
    lastRow = ws.Cells(ws.Rows.count, startCell.Column).End(xlUp).Row
    For r = headerEndRow + 1 To lastRow
        For c = startCell.Column - 1 To lastCol
            Set cell = ws.Cells(r, c)

            text = Trim(Replace(cell.Value, vbLf, " "))
            text = Replace(text, Chr(160), " ")
            text = Replace(text, "?", "up")
            text = Replace(text, "?", "down")
            text = Application.WorksheetFunction.Trim(text)
            currState = ExtractState(text)
            stateWordCount = 0
            If currState <> "" Then stateWordCount = UBound(Split(currState, " ")) + 1
            With cell.MergeArea
                .Font.Name = "Arial"
                .Font.Size = 8
                .Font.Bold = False
                .Font.Italic = False
                .WrapText = True
                .ShrinkToFit = False
                .IndentLevel = 0
                If stateWordCount > 0 And stateWordCount <= 4 Then
                    .HorizontalAlignment = xlCenter
                Else
                    .HorizontalAlignment = xlLeft
                End If
            End With
        Next c
    Next r
    For r = headerEndRow + 1 To lastRow
        If r = headerEndRow + 1 Then
        r = r + 1
        End If
        For c = startCell.Column + 1 To lastCol
            currText = CStr(ws.Cells(r, c).Value)
            prevText = CStr(ws.Cells(r - 1, c).Value)
            currState = ExtractState(currText)
            prevState = ExtractState(prevText)
            If currState <> "" And currState <> prevState Then
                stateStart = InStrRev(currText, currState)
                If stateStart > 0 Then
                    With ws.Cells(r, c).Characters(Start:=stateStart, Length:=Len(currState)).Font
                        .Bold = True
                    End With
                End If
            End If
        Next c
    Next r
    For r = headerEndRow + 1 To lastRow
        maxLines = 1
        For c = startCell.Column - 1 To lastCol
            Set cell = ws.Cells(r, c)
            If cell.MergeCells Then Set cell = cell.MergeArea.Cells(1, 1)
            If cell.WrapText Then
                charCount = Len(cell.Value)
                totalWidth = 0
                If cell.MergeCells Then
                    For Each mc In cell.MergeArea.Columns
                        totalWidth = totalWidth + mc.ColumnWidth
                    Next mc
                Else
                    totalWidth = cell.ColumnWidth
                End If
                If totalWidth > 0 Then
                    charsPerLine = totalWidth * 1.2
                    estLines = Application.WorksheetFunction.RoundUp(charCount / charsPerLine, 0)
                    If estLines > maxLines Then maxLines = estLines
                End If
            End If
        Next c
        ws.Rows(r).RowHeight = (0.3 + 0.1 * maxLines) * 72
    Next r
    Dim insertedHeaders As Collection
    Set insertedHeaders = InsertHeaderOnEachPage(ws, startCell.Row)
    Dim hdrRow As Variant
    For Each hdrRow In insertedHeaders
        For col = 1 To lastCol
            With ws.Cells(hdrRow, col)
                .Font.Name = "Aptos Narrow"
                .Font.Size = 10
                .Font.Bold = True
                .Interior.Color = RGB(191, 191, 191)
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .WrapText = True
                ws.Rows(hdrRow).RowHeight = 0.57 * 72
                ws.Range(ws.Cells(hdrRow, lastCol), ws.Cells(hdrRow, lastCol + 1)).Merge
            End With
        Next col
    Next hdrRow
    MsgBox "Formatting complete: headers styled, conditional alignment applied, vertically merged rows removed, row heights adjusted, and rows highlighted by line count."
End Sub
Sub DeleteBottomRowsOfVerticalMerges(ws As Worksheet, startRow As Long)
    Dim cell As Range
    Dim mergeRows As Long, bottomRow As Long
    For Each cell In ws.UsedRange
        If cell.Row >= startRow Then
            If cell.MergeCells Then
                With cell.MergeArea
                    mergeRows = .Rows.count
                    If mergeRows > 1 Then
                        bottomRow = .Row + mergeRows - 1
                        If bottomRow > cell.Row Then
                            On Error Resume Next
                            ws.Rows(bottomRow).Delete
                            On Error GoTo 0
                        End If
                    End If
                End With
            End If
        End If
    Next cell
End Sub
Sub CleanUpHeaderMergedRows(ws As Worksheet, headerRow As Long)
    Dim cell As Range
    Dim mergeRows As Long, bottomRow As Long
    Dim topRow As Long
    For Each cell In ws.Rows(headerRow).Cells
        If cell.MergeCells Then
            With cell.MergeArea
                mergeRows = .Rows.count
                topRow = .Row
                bottomRow = topRow + mergeRows - 1
                If mergeRows > 1 Then
                    On Error Resume Next
                    ws.Rows((topRow + 1) & ":" & bottomRow).Delete
                    On Error GoTo 0
                End If
                ws.Rows(topRow).RowHeight = 0.57 * 72
            End With
        End If
    Next cell
End Sub
Function ExtractState(cellText As String) As String
    Dim parts() As String
    Dim lastWord As String
    Dim keywords As Variant
    Dim i As Long
    keywords = Array("ON", "OFF", "True", "False", "Lit", "Not Lit", "Flashing")
    If InStr(cellText, "-") > 0 Then
        ExtractState = Trim(Mid(cellText, InStr(cellText, "-") + 1))
        Exit Function
    End If
    parts = Split(cellText, " ")
    If UBound(parts) >= 0 Then
        lastWord = parts(UBound(parts))
        For i = LBound(keywords) To UBound(keywords)
            If StrComp(lastWord, keywords(i), vbTextCompare) = 0 Then
                ExtractState = lastWord
                Exit Function
            End If
        Next i
    End If
    If InStr(cellText, "/") > 0 Then
        ExtractState = cellText
        Exit Function
    End If
    If UBound(parts) >= 0 Then
        ExtractState = parts(UBound(parts))
    Else
        ExtractState = ""
    End If
End Function
Function InsertHeaderOnEachPage(ws As Worksheet, headerRow As Long) As Collection
    Dim pb As HPageBreak
    Dim breakRow As Long
    Dim firstCellText As String
    Dim lastCol As Long
    Dim headerRange As Range
    Dim insertedRows As New Collection
    lastCol = ws.Cells(headerRow, ws.Columns.count).End(xlToLeft).Column
    Set headerRange = ws.Range(ws.Cells(headerRow, 1), ws.Cells(headerRow, lastCol))
    For Each pb In ws.HPageBreaks
        breakRow = pb.Location.Row
        firstCellText = Trim(ws.Cells(breakRow, 1).text)
        If Left(firstCellText, 3) <> "No." Then
            ws.Rows(breakRow).Insert Shift:=xlDown
            headerRange.Copy
            ws.Cells(breakRow, 1).PasteSpecial Paste:=xlPasteAllUsingSourceTheme
            Application.CutCopyMode = False
            insertedRows.Add breakRow
        End If
    Next pb
    Set InsertHeaderOnEachPage = insertedRows
End Function

