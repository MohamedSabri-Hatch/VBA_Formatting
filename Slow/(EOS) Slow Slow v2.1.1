Sub FormatCPKCTable_Basic_AlignedProperly()
    Dim ws As Worksheet
    Dim cell As Range, startCell As Range
    Dim col As Long, lastCol As Long
    Dim rowNum As Long, lastRow As Long
    Dim text As String
    Dim r As Long, c As Long
    Dim prevText As String, currText As String
    Dim prevState As String, currState As String
    Dim stateStart As Long
    Dim stateWordCount As Integer
    Dim charCount As Long, charsPerLine As Double, estLines As Long, maxLines As Long
    Dim totalWidth As Double
    Dim mc As Range
    Dim headerEndRow As Long
    Dim insertedHeaders As Collection
    Dim hdrRow As Variant
    Dim headerCharCount As Long, headerWidth As Double, headerLines As Long

    Set ws = ActiveSheet

    ' Find the header cell starting with "Action"
    
    If Not FindActionHeader(ws, startCell, rowNum, lastCol) Then Exit Sub
    
    ' Set Column Width to match page margins
    
    Call ColumnWidth(ws)

    ' Format header row
    For col = startCell.Column - 1 To lastCol
        Set cell = ws.Cells(rowNum, col)
        text = Trim(cell.Value)
        With cell
            .Font.Name = "Aptos Narrow"
            .Font.Size = 10
            .Font.Bold = True
            .Interior.Color = RGB(191, 191, 191)
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
        End With
        If text <> "" Then
            cell.Value = Application.WorksheetFunction.Proper(text)
        End If
    Next col

    Call CleanUpHeaderMergedRows(ws, startCell.Row)
    headerEndRow = startCell.MergeArea.Row + startCell.MergeArea.Rows.Count - 1
    Call DeleteBottomRowsOfVerticalMerges(ws, headerEndRow + 1)

    lastRow = ws.Cells(ws.Rows.Count, startCell.Column).End(xlUp).Row

    ' Format body cells
    For r = headerEndRow + 1 To lastRow
        For c = startCell.Column - 1 To lastCol
            Set cell = ws.Cells(r, c)
            text = Trim(Replace(cell.Value, vbLf, " "))
            text = Replace(text, Chr(160), " ")
            text = Replace(text, ChrW(&H2191), "up")
            text = Replace(text, ChrW(&H2193), "down")
            text = Application.WorksheetFunction.Trim(text)
            cell.Value = text
            currState = ExtractState(text)
            stateWordCount = 0
            If currState <> "" Then stateWordCount = UBound(Split(currState, " ")) + 1
            With cell.MergeArea
                .Font.Name = "Arial"
                .Font.Size = 8
                .Font.Bold = False
                .Font.Italic = False
                .WrapText = True
                .ShrinkToFit = False
                .IndentLevel = 0
                If stateWordCount > 0 And stateWordCount <= 4 Then
                    .HorizontalAlignment = xlCenter
                Else
                    .HorizontalAlignment = xlLeft
                End If
            End With
        Next c
    Next r

    ' Bold state changes
    For r = headerEndRow + 2 To lastRow
        For c = startCell.Column + 1 To lastCol
            currText = CStr(ws.Cells(r, c).Value)
            prevText = CStr(ws.Cells(r - 1, c).Value)
            currState = ExtractState(currText)
            prevState = ExtractState(prevText)
            If currState <> "" And currState <> prevState Then
                stateStart = InStrRev(currText, currState)
                If stateStart > 0 Then
                    With ws.Cells(r, c).Characters(Start:=stateStart, Length:=Len(currState)).Font
                        .Bold = True
                    End With
                End If
            End If
        Next c
    Next r

    ' Adjust row heights based on estimated line count
    For r = headerEndRow + 1 To lastRow
        maxLines = 1
        For c = startCell.Column - 1 To lastCol
            Set cell = ws.Cells(r, c)
            If cell.MergeCells Then Set cell = cell.MergeArea.Cells(1, 1)
            If cell.WrapText Then
                charCount = Len(cell.Value)
                totalWidth = 0
                If cell.MergeCells Then
                    For Each mc In cell.MergeArea.Columns
                        totalWidth = totalWidth + mc.ColumnWidth
                    Next mc
                Else
                    totalWidth = cell.ColumnWidth
                End If
                If totalWidth > 0 Then
                    charsPerLine = totalWidth * 1.2
                    estLines = Application.WorksheetFunction.RoundUp(charCount / charsPerLine, 0)
                    If estLines > maxLines Then maxLines = estLines
                End If
            End If
        Next c
        ws.Rows(r).RowHeight = (0.1 + 0.11 * maxLines) * 72
    Next r

    ' Insert headers on each page
    Set insertedHeaders = InsertHeaderOnEachPage(ws, startCell.Row, lastRow)
    For Each hdrRow In insertedHeaders
        For col = 1 To lastCol
            With ws.Cells(hdrRow, col)
                .Font.Name = "Aptos Narrow"
                .Font.Size = 10
                .Font.Bold = True
                .Interior.Color = RGB(191, 191, 191)
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .WrapText = True
                ' Estimate line count and apply dynamic height to inserted header row

                headerCharCount = Len(ws.Cells(hdrRow, col).Value)
                headerWidth = 0
                For i = col To lastCol
                    headerWidth = headerWidth + ws.Columns(i).ColumnWidth
                Next i
                
                If headerWidth > 0 Then
                    charsPerLine = headerWidth * 1.2
                    headerLines = Application.WorksheetFunction.RoundUp(headerCharCount / charsPerLine, 0)
                
                    Select Case headerLines
                        Case Is <= 2: ws.Rows(hdrRow).RowHeight = 28.8 ' 0.4 inches
                        Case 3:       ws.Rows(hdrRow).RowHeight = 36   ' 0.5 inches
                        Case 4:       ws.Rows(hdrRow).RowHeight = 43.2 ' 0.6 inches
                        Case Else:    ws.Rows(hdrRow).RowHeight = 50.4 ' 0.7 inches
                    End Select
                End If
                ws.Range(ws.Cells(hdrRow, lastCol), ws.Cells(hdrRow, lastCol + 1)).Merge
            End With
        Next col
    Next hdrRow

    MsgBox "Formatting complete: standardized layout, scaled to 7 inches, and optimized."
End Sub
Sub DeleteBottomRowsOfVerticalMerges(ws As Worksheet, startRow As Long)
    Dim cell As Range
    Dim mergeRows As Long, bottomRow As Long
    For Each cell In ws.UsedRange
        If cell.Row >= startRow Then
            If cell.MergeCells Then
                With cell.MergeArea
                    mergeRows = .Rows.Count
                    If mergeRows > 1 Then
                        bottomRow = .Row + mergeRows - 1
                        If bottomRow > cell.Row Then
                            On Error Resume Next
                            ws.Rows(bottomRow).Delete
                            On Error GoTo 0
                        End If
                    End If
                End With
            End If
        End If
    Next cell
End Sub

Sub CleanUpHeaderMergedRows(ws As Worksheet, headerRow As Long)
    Dim cell As Range
    Dim mergeRows As Long, bottomRow As Long
    Dim topRow As Long
    Dim headerCharCount As Long, headerWidth As Double
    Dim headerLines As Long, charsPerLine As Double

    For Each cell In ws.Rows(headerRow).Cells
        If cell.MergeCells Then
            With cell.MergeArea
                mergeRows = .Rows.Count
                topRow = .Row
                bottomRow = topRow + mergeRows - 1

                ' Delete rows below the top of the merge
                If mergeRows > 1 Then
                    On Error Resume Next
                    ws.Rows((topRow + 1) & ":" & bottomRow).Delete
                    On Error GoTo 0
                End If

                ' Estimate line count and apply dynamic height
                headerCharCount = Len(cell.Value)
                headerWidth = 0
                For Each col In .Columns
                    headerWidth = headerWidth + col.ColumnWidth
                Next col

                If headerWidth > 0 Then
                    charsPerLine = headerWidth * 1.2
                    headerLines = Application.WorksheetFunction.RoundUp(headerCharCount / charsPerLine, 0)

                    Select Case headerLines
                        Case Is <= 2: ws.Rows(topRow).RowHeight = 28.8 ' 0.4 inches
                        Case 3:       ws.Rows(topRow).RowHeight = 36   ' 0.5 inches
                        Case 4:       ws.Rows(topRow).RowHeight = 43.2 ' 0.6 inches
                        Case Else:    ws.Rows(topRow).RowHeight = 50.4 ' 0.7 inches
                    End Select
                End If
            End With
        End If
    Next cell
End Sub

Function ExtractState(cellText As String) As String
    Dim parts() As String
    Dim lastWord As String
    Dim keywords As Variant
    Dim i As Long
    keywords = Array("ON", "OFF", "True", "False", "Lit", "Not Lit", "Flashing")

    If InStr(cellText, "-") > 0 Then
        ExtractState = Trim(Mid(cellText, InStr(cellText, "-") + 1))
        Exit Function
    End If

    parts = Split(cellText, " ")
    If UBound(parts) >= 0 Then
        lastWord = parts(UBound(parts))
        For i = LBound(keywords) To UBound(keywords)
            If StrComp(lastWord, keywords(i), vbTextCompare) = 0 Then
                ExtractState = lastWord
                Exit Function
            End If
        Next i
    End If

    If InStr(cellText, "/") > 0 Then
        ExtractState = cellText
        Exit Function
    End If

    If UBound(parts) >= 0 Then
        ExtractState = parts(UBound(parts))
    Else
        ExtractState = ""
    End If
End Function

Function InsertHeaderOnEachPage(ws As Worksheet, headerRow As Long, lastRow As Long) As Collection
    Dim pb As HPageBreak
    Dim breakRow As Long
    Dim lastCol As Long
    Dim headerRange As Range
    Dim insertedRows As New Collection

    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    Set headerRange = ws.Range(ws.Cells(headerRow, 1), ws.Cells(headerRow, lastCol))

    For Each pb In ws.HPageBreaks
        breakRow = pb.Location.Row
        firstCellText = Trim(ws.Cells(headerRow, 1), text)
        If Left(firstCellText, 3) <> "No." Then
            ' Skip if header already exists
        Else
            ws.Rows(breakRow).Insert Shift:=xlDown
            headerRange.Copy
            ws.Cells(breakRow, 1).PasteSpecial Paste:=xlPasteAllUsingSourceTheme
            Application.CutCopyMode = False
            insertedRows.Add breakRow
        End If
    Next pb

    Set InsertHeaderOnEachPage = insertedRows
End Function


Sub ColumnWidth(ws As Worksheet)
    With ws
        .Columns("A:A").ColumnWidth = 2.86
        .Columns("B:J").ColumnWidth = 9
    End With
End Sub

Sub CapitalizeSpecificWords()
    Dim ws As Worksheet
    Dim cell As Range
    Dim targetWords As Variant
    Dim replacementWords As Variant
    Dim i As Long

    Set ws = ActiveSheet

    ' Define words to replace and their capitalized versions
    targetWords = Array("Tpmt", "abc", "xyz") ' Add more as needed
    replacementWords = Array("TPMT", "ABC", "XYZ")

    ' Loop through all used cells
    For Each cell In ws.UsedRange
        If Not IsError(cell.Value) Then
            If VarType(cell.Value) = vbString Then
                For i = LBound(targetWords) To UBound(targetWords)
                    cell.Value = Replace(cell.Value, targetWords(i), replacementWords(i), , , vbTextCompare)
                Next i
            End If
        End If
    Next cell

    MsgBox "Capitalization complete!"
End Sub

Function FindActionHeader(ws As Worksheet, ByRef startCell As Range, ByRef rowNum As Long, ByRef lastCol As Long) As Boolean
    Dim cell As Range
    Set startCell = Nothing
    
    For Each cell In ws.UsedRange
        If LCase(Left(Trim(cell.Value), 6)) = "action" Then
            Set startCell = cell
            Exit For
        End If
    Next cell

    If startCell Is Nothing Then
        MsgBox "No header starting with 'Action' found."
        FindActionHeader = False
        Exit Function
    End If

    rowNum = startCell.Row
    lastCol = ws.Cells(rowNum, ws.Columns.Count).End(xlToLeft).Column
    FindActionHeader = True
End Function

